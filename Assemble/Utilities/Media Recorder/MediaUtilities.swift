//  Assemble
//  Created by David Spry on 22/6/20.
//  Copyright Â© 2020 David Spry. All rights reserved.

import UIKit
import Photos

/// Constants to define the size and shape of a video generated by the `MediaRecorder`.

enum VideoMode {
    case square
    case portrait
}

/// A named tuple defining the settings for a `MediaRecorder` session.

typealias VideoSettings = (video: Bool, mode: VideoMode, type: Visualisation)

/// A collection of utilities for interacting with media encoded by the `MediaRecorder`.

struct MediaUtilities {
    
    /// The URL used to address and pass data to the Instagram application.

    static internal let instagramURL: String = "instagram-stories://share"
    
    /// The URL used to define the intention to share a data item as a background video in an Instagram Story.

    static internal let instagramShareURL: String = "com.instagram.sharedSticker.backgroundVideo"
    
    /// Constants defining the path extension of audio and video media encoded by the `MediaRecorder`

    public enum MediaType : String {
        case audio = "aac"
        case video = "mp4"
    }

    /// Save the video located at the given URL to the photo library.
    /// - Parameter file: The URL of the video file to be saved.

    static public func saveToCameraRoll(_ file: URL) {
        if PHPhotoLibrary.authorizationStatus() == .notDetermined {
            PHPhotoLibrary.requestAuthorization { status in
                print("[MediaUtilities] Authorisation status: \(status)")
                saveToCameraRoll(file)
            }
        }

        if PHPhotoLibrary.authorizationStatus() == .authorized {
            PHPhotoLibrary.shared().performChanges({
                PHAssetChangeRequest.creationRequestForAssetFromVideo(atFileURL: file)
            }, completionHandler: { didSave, error in
                if didSave { print("[MediaUtilities] File saved successfully") }
                else if let error = error {
                    print("[MediaUtilities] File could not be saved to the photo library.\n\(error)")
                }
            })
        }
        
        else if PHPhotoLibrary.authorizationStatus() == .denied {
            print("[MediaUtilities] File could not be saved to the photo library because access permission was denied.")
        }
    }
    
    /// Indicate whether the device has access to Instagram for the purpose of sharing an Instagram Story.

    static public func canAccessInstagram() -> Bool {
        guard let instagram = URL(string: instagramURL),
              UIApplication.shared.canOpenURL(instagram)
              else { return false }

        return true
    }
    
    /// Share the video file at the given URL as an Instagram Story using Instagram.
    /// - Parameter file: The URL of the video file to be shared.

    static public func shareToInstagram(_ file: URL) {
        guard let instagram = URL(string: instagramURL),
              UIApplication.shared.canOpenURL(instagram)
              else { return }

        let data: Data
        do    { data = try Data(contentsOf: file) }
        catch { print("[MediaUtilities] Data could not be created from file URL."); return }

        let items: [String:Any] = [instagramShareURL : data]
        UIPasteboard.general.setItems([items])
        UIApplication.shared.open(instagram)
    }
}
